#+TITLE:     Creating a Clojure web-application without setting your hair on fire
#+AUTHOR:    Richard Tiffin
#+EMAIL:     richard.tiffin@costain.com

* Set-up
-emacs zoom 'C-x C-+'
-switch window C-x o

* Introduction
  
* Pre-requisits
A JDK, using version 8 for this demonstration


* Clojure Builds Tool
** Leningen - Which I'm going to use for this demonstration
** Boot


* IDE's
** EMACS + CiDer
** Lighttable
** Visual Code   
   

* Creating a simple web application
** Using two clojure libraries, Ring and built ontop of this Compojure
** Create a new web-application using leiningen
lein new compojure costain-techtalk
** Open the file project.clj to see the project file including depdencies
- Dependency management is carried out using maven behind the scenes
- The web-application can be run using lein and ring on an embedded Jetty Server
** We can also create a self contained jar
lein ring uberjar
java -jar target/costain-techtalk-0.1.0-SNAPSHOT-standalone.jar


** Rendering views
*** Request mapping user handler, add new mapping
*** Format the output as html using hiccup
**** Using library https://github.com/weavejester/hiccup
**** Import the library into the project 
     [hiccup "1.0.5"]
**** Use the library in out handler 
[hiccup.page :as h]
**** Make the handler return some html
(h/html5
[:head [:title "Tech Talk"]]
[:body ""])


** Handling Request Parameters
*** As parth variables
**** Alter one of the mappings to take a path variable
(GET "/tech-talk/:title"
       {{title :title} :params :as params}
       (h/html5
        [:head [:title title]]
        [:body [:div
                [:h1 title]
                [:p "Content"]]]))
*** As request parameters using de-construction
- length :length
- add length to body
- Show as a get

*** Show how to change the response to a post
**** Change request to post
**** Fix the security thing by changing wrap to
 (wrap-defaults (assoc-in site-defaults [:security :anti-forgery] false))
**** Show the http post
- http POST localhost:3000/tech-talk/clojure
**** Expect a parameer in post request
- Add lenth as paramater and put into body
- Use http request -f POST localhost:3000/tech-talk/clojure length=30m

** Returning responses as JSON
*** A closer look at the requse handler code
*** Modify request handler to return json reponses
**** Add ring clojure library to project 
[ring/ring-json "0.4.0"]
**** Import the library into the handler 
[ring.middleware.json :refer [wrap-json-response wrap-json-body]]
**** Alter the handler mapping to handle json rsponses
(def app
  (-> app-routes
      (wrap-defaults site-defaults)
      wrap-json-response))
**** Add a request mapping to return some json      
  (GET "/json" []
       {:status 200
        :headers {"Content-Type" "text/html"}
        :body {:location "Yatton"
               :unit "12A"}})
